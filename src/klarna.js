// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, config, credentials, crypto, flags, httpRequest, klarna, request, wrapper;

  request = require('request');

  crypto = require('crypto');

  Promise = require('promise');

  flags = {
    test: true,
    initalized: false
  };

  credentials = {
    eid: null,
    secret: null
  };

  config = {
    purchase_country: 'SE',
    purchase_currency: 'SEK',
    locale: 'sv-se',
    merchant: {
      id: null,
      terms_uri: 'http://www.example.com',
      cancellation_terms_uri: 'http://www.example.com',
      checkout_uri: 'http://www.example.com',
      confirmation_uri: 'http://www.example.com',
      push_uri: 'http://www.example.com'
    }
  };

  klarna = {
    url: {
      test: 'https://checkout.testdrive.klarna.com/checkout/orders',
      live: 'https://checkout.klarna.com/checkout/orders'
    }
  };

  httpRequest = {
    headers: function(payload) {
      var biscuit, hash;
      biscuit = payload != null ? JSON.stringify(payload) + credentials.secret : credentials.secret;
      hash = crypto.createHash('sha256').update(biscuit).digest('base64');
      return {
        'Authorization': 'Klarna ' + hash,
        'Content-Type': 'application/vnd.klarna.checkout.aggregated-order-v2+json',
        'Accept': 'application/vnd.klarna.checkout.aggregated-order-v2+json'
      };
    },
    options: function(data) {
      return {
        url: flags.test ? klarna.url.test : klarna.url.live,
        headers: this.headers(data),
        body: data,
        json: true
      };
    }
  };

  exports.init = function(input) {
    if (input.eid != null) {
      credentials.eid = input.eid;
      config.merchant.id = input.eid;
    }
    if (input.secret != null) {
      credentials.secret = input.secret;
    }
    if ((input.eid != null) && (input.secret != null)) {
      return flags.initalized = true;
    }
  };

  exports.config = function(input) {
    if (input.purchase_country != null) {
      config.purchase_country = input.purchase_country;
    }
    if (input.purchase_currency != null) {
      config.purchase_currency = input.purchase_currency;
    }
    if (input.locale != null) {
      config.locale = input.locale;
    }
    if (input.terms_uri != null) {
      config.merchant.terms_uri = input.terms_uri;
    }
    if (input.cancellation_terms_uri != null) {
      config.merchant.cancellation_terms_uri = input.cancellation_terms_uri;
    }
    if (input.checkout_uri != null) {
      config.merchant.checkout_uri = input.checkout_uri;
    }
    if (input.confirmation_uri != null) {
      config.merchant.confirmation_uri = input.confirmation_uri;
    }
    if (input.push_uri != null) {
      return config.merchant.push_uri = input.push_uri;
    }
  };

  wrapper = function(f) {
    var key, ref, value;
    if (!flags.initalized) {
      f = function() {
        return new Promise(function(resolve, reject) {
          return reject('Klarna module not initialized. Please use init() method.');
        });
      };
    }
    ref = config.uris;
    for (key in ref) {
      value = ref[key];
      if (value == null) {
        f = function() {
          return new Promise(function(resolve, reject) {
            return reject("'" + key + "'" + ' not set');
          });
        };
        break;
      }
    }
    return f;
  };

  exports.place = function(cart) {
    var place;
    place = function() {
      return new Promise(function(resolve, reject) {
        var data;
        data = config;
        data.cart = cart;
        return request.post(httpRequest.options(data), function(error, response, body) {
          var id, location;
          if (error) {
            reject("HTTP Request error: " + error.code);
            return;
          }
          if (body) {
            reject("Klarna Error: " + body.http_status_code + ", " + body.http_status_message + " - " + body.internal_message);
            return;
          }
          if (response.statusCode != null) {
            if (response.statusCode === 201) {
              location = response.headers.location;
              id = location.slice(location.lastIndexOf('/') + 1);
              return resolve(id);
            }
          }
        });
      });
    };
    return wrapper(place)();
  };

  exports.fetch = function(id) {
    return new Promise(function(resolve, reject) {});
  };

  exports.update = function(id, data) {
    return new Promise(function(resolve, reject) {});
  };

  exports.confirm = function(id, reference) {
    return new Promise(function(resolve, reject) {});
  };

  exports.test = function() {
    return console.log(httpRequest.options({
      test: 'fisk'
    }));
  };

}).call(this);
